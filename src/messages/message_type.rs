use crate::serde::deserialize::{BinaryDeserialize, BinaryReader};

#[repr(u16)]
#[derive(Copy, Clone, Debug, Eq, PartialEq)]
pub enum MessageType {
    // Client
    ChangeAction = 0,
    PublicChatMessage = 1,
    Logout = 2,
    UpdateStatsRequest = 3,
    Ping = 4,
    StartSpectating = 16,
    StopSpectating = 17,
    SpectateFrames = 18,
    CantSpectate = 21,
    PrivateChatMessage = 25,
    LeaveLobby = 29,
    JoinLobby = 30,
    CreateMatch = 31,
    JoinMatch = 32,
    LeaveMatch = 33,
    MatchChangeSlot = 38,
    MatchReady = 39,
    MatchLock = 40,
    MatchChangeSettings = 41,
    StartMatch = 44,
    UpdateMatchScore = 47,
    MatchPlayerComplete = 49,
    MatchChangeMods = 51,
    MatchLoadComplete = 52,
    MatchNoBeatmap = 54,
    MatchNotReady = 55,
    MatchFailed = 56,
    MatchHasBeatmap = 59,
    MatchSkipRequest = 60,
    JoinChannel = 63,
    MatchChangeHost = 70,
    AddFriend = 73,
    RemoveFriend = 74,
    MatchChangeTeam = 77,
    LeaveChannel = 78,
    ReceiveUpdates = 79,
    SetAwayMessage = 82,
    UserStatsRequest = 85,
    MatchInvite = 87,
    MatchChangePassword = 90,
    TournamentMatchInfoRequest = 93,
    RequestPresences = 97,
    RequestAllPresences = 98,
    ToggleBlockNonFriendDms = 99,
    TournamentJoinMatchChannel = 108,
    TournamentLeaveMatchChannel = 109,

    // Server
    LoginSuccessful = 5,
    ChatMessage = 7,
    Pong = 8,
    UserStats = 11,
    UserLogout = 12,
    SpectatorJoined = 13,
    SpectatorLeft = 14,
    SpectatorFrames = 15,
    FailedSpectating = 22,
    GetAttention = 23,
    Alert = 24,
    MatchUpdate = 26,
    MatchCreated = 27,
    MatchDisposed = 28,
    MatchJoinSuccess = 36,
    MatchJoinFailed = 37,
    FellowSpectatorJoined = 42,
    FellowSpectatorLeft = 43,
    MatchStart = 46,
    MatchScoreUpdate = 48,
    MatchTransferHost = 50,
    MatchAllPlayersLoaded = 53,
    MatchPlayerFailed = 57,
    MatchComplete = 58,
    MatchSkip = 61,
    ChannelJoinSuccess = 64,
    ChannelInfo = 65,
    ChannelKick = 66,
    ChannelAutoJoin = 67,
    Privileges = 71,
    FriendsList = 72,
    ProtocolVersion = 75,
    MainMenuIcon = 76,
    MatchPlayerSkipped = 81,
    UserPresence = 83,
    Restart = 86,
    ChannelInfoEnd = 89,
    MatchPasswordChanged = 91,
    SilenceEnd = 92,
    UserSilenced = 94,
    UserPresenceSingle = 95,
    UserPresenceBundle = 96,
    UserDmBlocked = 100,
    TargetSilenced = 101,
    Restricted = 104,
    MatchAborted = 106,
    SwitchServer = 107,
}

impl TryFrom<u16> for MessageType {
    type Error = std::io::Error;

    fn try_from(value: u16) -> Result<Self, Self::Error> {
        use std::io::ErrorKind;

        Ok(match value {
            // Client
            0 => MessageType::ChangeAction,
            1 => MessageType::PublicChatMessage,
            2 => MessageType::Logout,
            3 => MessageType::UpdateStatsRequest,
            4 => MessageType::Ping,
            16 => MessageType::StartSpectating,
            17 => MessageType::StopSpectating,
            18 => MessageType::SpectateFrames,
            21 => MessageType::CantSpectate,
            25 => MessageType::PrivateChatMessage,
            29 => MessageType::LeaveLobby,
            30 => MessageType::JoinLobby,
            31 => MessageType::CreateMatch,
            32 => MessageType::JoinMatch,
            33 => MessageType::LeaveMatch,
            38 => MessageType::MatchChangeSlot,
            39 => MessageType::MatchReady,
            40 => MessageType::MatchLock,
            41 => MessageType::MatchChangeSettings,
            44 => MessageType::StartMatch,
            47 => MessageType::UpdateMatchScore,
            49 => MessageType::MatchPlayerComplete,
            51 => MessageType::MatchChangeMods,
            52 => MessageType::MatchLoadComplete,
            54 => MessageType::MatchNoBeatmap,
            55 => MessageType::MatchNotReady,
            56 => MessageType::MatchFailed,
            59 => MessageType::MatchHasBeatmap,
            60 => MessageType::MatchSkipRequest,
            63 => MessageType::JoinChannel,
            70 => MessageType::MatchChangeHost,
            73 => MessageType::AddFriend,
            74 => MessageType::RemoveFriend,
            77 => MessageType::MatchChangeTeam,
            78 => MessageType::LeaveChannel,
            79 => MessageType::ReceiveUpdates,
            82 => MessageType::SetAwayMessage,
            85 => MessageType::UserStatsRequest,
            87 => MessageType::MatchInvite,
            90 => MessageType::MatchChangePassword,
            93 => MessageType::TournamentMatchInfoRequest,
            97 => MessageType::RequestPresences,
            98 => MessageType::RequestAllPresences,
            99 => MessageType::ToggleBlockNonFriendDms,
            108 => MessageType::TournamentJoinMatchChannel,
            109 => MessageType::TournamentLeaveMatchChannel,

            // Server
            5 => MessageType::LoginSuccessful,
            7 => MessageType::ChatMessage,
            8 => MessageType::Pong,
            11 => MessageType::UserStats,
            12 => MessageType::UserLogout,
            13 => MessageType::SpectatorJoined,
            14 => MessageType::SpectatorLeft,
            15 => MessageType::SpectatorFrames,
            22 => MessageType::FailedSpectating,
            23 => MessageType::GetAttention,
            24 => MessageType::Alert,
            26 => MessageType::MatchUpdate,
            27 => MessageType::MatchCreated,
            28 => MessageType::MatchDisposed,
            36 => MessageType::MatchJoinSuccess,
            37 => MessageType::MatchJoinFailed,
            42 => MessageType::FellowSpectatorJoined,
            43 => MessageType::FellowSpectatorLeft,
            46 => MessageType::MatchStart,
            48 => MessageType::MatchScoreUpdate,
            50 => MessageType::MatchTransferHost,
            53 => MessageType::MatchAllPlayersLoaded,
            57 => MessageType::MatchPlayerFailed,
            58 => MessageType::MatchComplete,
            61 => MessageType::MatchSkip,
            64 => MessageType::ChannelJoinSuccess,
            65 => MessageType::ChannelInfo,
            66 => MessageType::ChannelKick,
            67 => MessageType::ChannelAutoJoin,
            71 => MessageType::Privileges,
            72 => MessageType::FriendsList,
            75 => MessageType::ProtocolVersion,
            76 => MessageType::MainMenuIcon,
            81 => MessageType::MatchPlayerSkipped,
            83 => MessageType::UserPresence,
            86 => MessageType::Restart,
            89 => MessageType::ChannelInfoEnd,
            91 => MessageType::MatchPasswordChanged,
            92 => MessageType::SilenceEnd,
            94 => MessageType::UserSilenced,
            95 => MessageType::UserPresenceSingle,
            96 => MessageType::UserPresenceBundle,
            100 => MessageType::UserDmBlocked,
            101 => MessageType::TargetSilenced,
            104 => MessageType::Restricted,
            106 => MessageType::MatchAborted,
            107 => MessageType::SwitchServer,
            _ => Err(Self::Error::new(
                ErrorKind::InvalidData,
                "invalid packet id",
            ))?,
        })
    }
}

impl<'a> BinaryDeserialize<'a> for MessageType {
    fn read_from(reader: &mut BinaryReader<'a>) -> std::io::Result<Self> {
        Ok(MessageType::try_from(u16::read_from(reader)?)?)
    }
}
